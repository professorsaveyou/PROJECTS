% Signal Cleaner 3000 - MATLAB Code

% Define parameters
Fs = 8000;             % Sampling frequency in Hz
passband_freq = 1000;  % Passband frequency in Hz
stopband_freq = 1500;  % Stopband frequency in Hz
passband_ripple = 1;   % Passband ripple in dB
stopband_atten = 40;   % Stopband attenuation in dB

% Design the filter using a Butterworth design
% Calculate normalized frequencies for the filter design
Wp = passband_freq / (Fs/2); % Passband edge normalized
Ws = stopband_freq / (Fs/2); % Stopband edge normalized

% Calculate the order and cutoff frequency for the filter
[n, Wn] = buttord(Wp, Ws, passband_ripple, stopband_atten);

% Design the lowpass Butterworth filter
[b, a] = butter(n, Wn, 'low');

% Display filter characteristics
fvtool(b, a); % Opens a filter analysis tool

% Test signal creation
t = 0:1/Fs:1; % 1 second time vector
signal = sin(2*pi*500*t) + sin(2*pi*1000*t) + sin(2*pi*1500*t) + sin(2*pi*2000*t);

% Apply filter to the test signal
filtered_signal = filter(b, a, signal);

% Bonus: Zero-phase filtering
filtered_signal_zero_phase = filtfilt(b, a, signal);

% Plot time-domain results
figure;
subplot(3,1,1);
plot(t, signal);
title('Original Signal (Time Domain)');
xlabel('Time (s)');
ylabel('Amplitude');

subplot(3,1,2);
plot(t, filtered_signal);
title('Filtered Signal (Time Domain)');
xlabel('Time (s)');
ylabel('Amplitude');

subplot(3,1,3);
plot(t, filtered_signal_zero_phase);
title('Zero-Phase Filtered Signal (Time Domain)');
xlabel('Time (s)');
ylabel('Amplitude');

% Frequency-domain analysis
nfft = length(signal);
f = Fs/2*linspace(0,1,fix(nfft/2)+1); % Ensure index is integer

% Compute the Fourier transforms
S_orig = fft(signal, nfft);
S_filt = fft(filtered_signal, nfft);
S_filt_zero = fft(filtered_signal_zero_phase, nfft);

% Plot frequency-domain results
figure;
subplot(3,1,1);
plot(f, 2*abs(S_orig(1:fix(nfft/2)+1))); % Ensure index is integer
title('Original Signal (Frequency Domain)');
xlabel('Frequency (Hz)');
ylabel('Magnitude');

subplot(3,1,2);
plot(f, 2*abs(S_filt(1:fix(nfft/2)+1))); % Ensure index is integer
title('Filtered Signal (Frequency Domain)');
xlabel('Frequency (Hz)');
ylabel('Magnitude');

subplot(3,1,3);
plot(f, 2*abs(S_filt_zero(1:fix(nfft/2)+1))); % Ensure index is integer
title('Zero-Phase Filtered Signal (Frequency Domain)');
xlabel('Frequency (Hz)');
ylabel('Magnitude');

% Experimenting with different filter orders
orders = [2, 4, 6, 8];
figure;
for i = 1:length(orders)
    [b_temp, a_temp] = butter(orders(i), Wn, 'low');
    temp_filtered_signal = filter(b_temp, a_temp, signal);
    subplot(2, 2, i);
    plot(t, temp_filtered_signal);
    title(['Filtered Signal with Order ', num2str(orders(i))]);
    xlabel('Time (s)');
    ylabel('Amplitude');
end
